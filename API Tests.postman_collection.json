{
	"info": {
		"_postman_id": "b1534ce2-9835-440b-a190-b8137157dc5b",
		"name": "API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40523257"
	},
	"item": [
		{
			"name": "Create Order post (200)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGVOYW1lIjoicm9vdCIsImlhdCI6MTczNTEzMjY0NCwiZXhwIjoxNzM3NzI0NjQ0fQ.k8WkeX1HpDEPBWXF-T8mjeV91YTm9j9LSFPx7pCCz8I",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customer_id\": 123,\r\n  \"order_date\": \"2024-12-25\",\r\n  \"items\": [\r\n    { \"product_id\": 101, \"quantity\": 2 },\r\n    { \"product_id\": 102, \"quantity\": 1 }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://a_leibpaqkgx3.v7.demo.nocobase.com/api/order:list",
					"protocol": "https",
					"host": [
						"a_leibpaqkgx3",
						"v7",
						"demo",
						"nocobase",
						"com"
					],
					"path": [
						"api",
						"order:list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Order post (403)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errors).to.be.an('array');\r",
							"    responseData.errors.forEach(function(error) {\r",
							"        pm.expect(error).to.have.property('message');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Errors array is present and contains expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.errors).to.exist.and.to.be.an('array');\r",
							"    pm.expect(responseData.errors).to.have.lengthOf(1);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customer_id\": 123,\r\n  \"order_date\": \"2024-12-25\",\r\n  \"items\": [\r\n    { \"product_id\": 101, \"quantity\": 2 },\r\n    { \"product_id\": 102, \"quantity\": 1 }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://a_leibpaqkgx3.v7.demo.nocobase.com/api/order:list",
					"protocol": "https",
					"host": [
						"a_leibpaqkgx3",
						"v7",
						"demo",
						"nocobase",
						"com"
					],
					"path": [
						"api",
						"order:list"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order (200)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the data schema attributes\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    \r",
							"    responseData.data.forEach(function(order) {\r",
							"        pm.expect(order.createdAt).to.exist.and.to.be.a('string');\r",
							"        pm.expect(order.updatedAt).to.exist.and.to.be.a('string');\r",
							"        pm.expect(order.id).to.exist.and.to.be.a('number');\r",
							"        pm.expect(order.total).to.exist.and.to.be.a('number');\r",
							"        pm.expect(order.company_ID).to.exist.and.to.be.a('number');\r",
							"        pm.expect(order.tax).to.exist.and.to.be.a('number');\r",
							"        pm.expect(order.contact_id).to.exist.and.to.be.a('number');\r",
							"        pm.expect(order.subtotal).to.exist.and.to.be.a('number');\r",
							"        pm.expect(order.discount).to.exist.and.to.be.a('number');\r",
							"        pm.expect(order.adjustment).to.exist.and.to.be.a('number');\r",
							"        pm.expect(order.currency_ID).to.be.a('null');\r",
							"        pm.expect(order.order_ID).to.exist.and.to.be.a('string');\r",
							"        pm.expect(order.status).to.exist.and.to.be.a('string');\r",
							"        pm.expect(order.sort).to.exist.and.to.be.a('number');\r",
							"        pm.expect(order.createdById).to.exist.and.to.be.a('number');\r",
							"        pm.expect(order.updatedById).to.exist.and.to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the meta schema - count, page, pageSize, totalPage\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.meta).to.exist.and.to.be.an('object');\r",
							"    pm.expect(responseData.meta).to.have.property('count');\r",
							"    pm.expect(responseData.meta).to.have.property('page');\r",
							"    pm.expect(responseData.meta).to.have.property('pageSize');\r",
							"    pm.expect(responseData.meta).to.have.property('totalPage');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGVOYW1lIjoicm9vdCIsImlhdCI6MTczNTEzMjY0NCwiZXhwIjoxNzM3NzI0NjQ0fQ.k8WkeX1HpDEPBWXF-T8mjeV91YTm9j9LSFPx7pCCz8I",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"order_id\": 1,\r\n  \"customer_id\": 123,\r\n  \"status\": \"created\",\r\n  \"items\": [\r\n    { \"product_id\": 101, \"quantity\": 2 },\r\n    { \"product_id\": 102, \"quantity\": 1 }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://a_leibpaqkgx3.v7.demo.nocobase.com/api/order:list/1",
					"protocol": "https",
					"host": [
						"a_leibpaqkgx3",
						"v7",
						"demo",
						"nocobase",
						"com"
					],
					"path": [
						"api",
						"order:list",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Order (400)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is text/plain\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response body contains 'Bad Request'\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Schema validation for the response body\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGVOYW1lIjoicm9vdCIsImlhdCI6MTczNTEzMjY0NCwiZXhwIjoxNzM3NzI0NjQ0fQ.k8WkeX1HpDEPBWXF-T8mjeV91YTm9j9LSFPx7pCCz8I",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"order_id\": 01,\r\n  \"customer_id\": 123,\r\n  \"status\": \"created\",\r\n  \"items\": [\r\n    { \"product_id\": 101, \"quantity\": 2 },\r\n    { \"product_id\": 102, \"quantity\": 1 }\r\n  ]\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://a_leibpaqkgx3.v7.demo.nocobase.com/api/order:list/999",
					"protocol": "https",
					"host": [
						"a_leibpaqkgx3",
						"v7",
						"demo",
						"nocobase",
						"com"
					],
					"path": [
						"api",
						"order:list",
						"999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Order (200)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  const requiredFields = [\"createdAt\", \"updatedAt\", \"id\", \"total\", \"company_ID\", \"tax\", \"contact_id\", \"subtotal\", \"discount\", \"adjustment\", \"currency_ID\", \"order_ID\", \"status\", \"sort\", \"createdById\", \"updatedById\"];\r",
							"  requiredFields.forEach(field => {\r",
							"    pm.expect(responseData).to.have.property(field);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData.data).to.be.an('array').to.have.lengthOf.at.least(1);\r",
							"  responseData.data.forEach(function(item) {\r",
							"    pm.expect(item.total).to.be.a('number').and.to.satisfy((val) => val >= 0, \"Total should be a non-negative integer\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data array and meta object should exist in the response\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.data).to.exist.and.to.be.an('array');\r",
							"  pm.expect(responseData.meta).to.exist.and.to.be.an('object');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGVOYW1lIjoicm9vdCIsImlhdCI6MTczNTEzMjY0NCwiZXhwIjoxNzM3NzI0NjQ0fQ.k8WkeX1HpDEPBWXF-T8mjeV91YTm9j9LSFPx7pCCz8I",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"status\": \"2\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://a_leibpaqkgx3.v7.demo.nocobase.com/api/order:list/1",
					"protocol": "https",
					"host": [
						"a_leibpaqkgx3",
						"v7",
						"demo",
						"nocobase",
						"com"
					],
					"path": [
						"api",
						"order:list",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Order ( 200)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response contains required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.data.forEach((order) => {\r",
							"        pm.expect(order).to.include.all.keys(\r",
							"            'createdAt', 'updatedAt', 'id', 'total', 'company_ID', \r",
							"            'tax', 'contact_id', 'subtotal', 'discount', 'adjustment', \r",
							"            'currency_ID', 'order_ID', 'status', 'sort', 'createdById', 'updatedById'\r",
							"        );\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Data array is present and contains expected number of elements\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.data).to.exist;\r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    pm.expect(responseData.data).to.have.lengthOf(1);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsInJvbGVOYW1lIjoicm9vdCIsImlhdCI6MTczNTEzMjY0NCwiZXhwIjoxNzM3NzI0NjQ0fQ.k8WkeX1HpDEPBWXF-T8mjeV91YTm9j9LSFPx7pCCz8I",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"message\": \"Order successfully deleted\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://a_leibpaqkgx3.v7.demo.nocobase.com/api/order:list/1",
					"protocol": "https",
					"host": [
						"a_leibpaqkgx3",
						"v7",
						"demo",
						"nocobase",
						"com"
					],
					"path": [
						"api",
						"order:list",
						"1"
					]
				}
			},
			"response": []
		}
	]
}